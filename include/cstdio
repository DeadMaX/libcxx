// -*- C++ -*-
//===---------------------------- cstdio ----------------------------------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is dual licensed under the MIT and the University of Illinois Open
// Source Licenses. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#ifndef _LIBCPP_CSTDIO
#define _LIBCPP_CSTDIO

/*
    cstdio synopsis

Macros:

    BUFSIZ
    EOF
    FILENAME_MAX
    FOPEN_MAX
    L_tmpnam
    NULL
    SEEK_CUR
    SEEK_END
    SEEK_SET
    TMP_MAX
    _IOFBF
    _IOLBF
    _IONBF
    stderr
    stdin
    stdout

namespace std
{

Types:

FILE
fpos_t
size_t

int remove(const char* filename);
int rename(const char* old, const char* new);
FILE* tmpfile(void);
char* tmpnam(char* s);
int fclose(FILE* stream);
int fflush(FILE* stream);
FILE* fopen(const char* restrict filename, const char* restrict mode);
FILE* freopen(const char* restrict filename, const char * restrict mode,
              FILE * restrict stream);
void setbuf(FILE* restrict stream, char* restrict buf);
int setvbuf(FILE* restrict stream, char* restrict buf, int mode, size_t size);
int fprintf(FILE* restrict stream, const char* restrict format, ...);
int fscanf(FILE* restrict stream, const char * restrict format, ...);
int printf(const char* restrict format, ...);
int scanf(const char* restrict format, ...);
int snprintf(char* restrict s, size_t n, const char* restrict format, ...);    // C99
int sprintf(char* restrict s, const char* restrict format, ...);
int sscanf(const char* restrict s, const char* restrict format, ...);
int vfprintf(FILE* restrict stream, const char* restrict format, va_list arg);
int vfscanf(FILE* restrict stream, const char* restrict format, va_list arg);  // C99
int vprintf(const char* restrict format, va_list arg);
int vscanf(const char* restrict format, va_list arg);                          // C99
int vsnprintf(char* restrict s, size_t n, const char* restrict format,         // C99
              va_list arg);
int vsprintf(char* restrict s, const char* restrict format, va_list arg);
int vsscanf(const char* restrict s, const char* restrict format, va_list arg); // C99
int fgetc(FILE* stream);
char* fgets(char* restrict s, int n, FILE* restrict stream);
int fputc(int c, FILE* stream);
int fputs(const char* restrict s, FILE* restrict stream);
int getc(FILE* stream);
int getchar(void);
char* gets(char* s);  // removed in C++14
int putc(int c, FILE* stream);
int putchar(int c);
int puts(const char* s);
int ungetc(int c, FILE* stream);
size_t fread(void* restrict ptr, size_t size, size_t nmemb,
             FILE* restrict stream);
size_t fwrite(const void* restrict ptr, size_t size, size_t nmemb,
              FILE* restrict stream);
int fgetpos(FILE* restrict stream, fpos_t* restrict pos);
int fseek(FILE* stream, long offset, int whence);
int fsetpos(FILE*stream, const fpos_t* pos);
long ftell(FILE* stream);
void rewind(FILE* stream);
void clearerr(FILE* stream);
int feof(FILE* stream);
int ferror(FILE* stream);
void perror(const char* s);

}  // std
*/

#include <__config>
#include <stdio.h>

#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
#pragma GCC system_header
#endif

_LIBCPP_BEGIN_NAMESPACE_STD

using _LIBCPP_CNAMESPACE::FILE;
using _LIBCPP_CNAMESPACE::fpos_t;
using _LIBCPP_CNAMESPACE::size_t;

using _LIBCPP_CNAMESPACE::fclose;
using _LIBCPP_CNAMESPACE::fflush;
using _LIBCPP_CNAMESPACE::setbuf;
using _LIBCPP_CNAMESPACE::setvbuf;
using _LIBCPP_CNAMESPACE::fprintf;
using _LIBCPP_CNAMESPACE::fscanf;
using _LIBCPP_CNAMESPACE::snprintf;
using _LIBCPP_CNAMESPACE::sprintf;
using _LIBCPP_CNAMESPACE::sscanf;
using _LIBCPP_CNAMESPACE::vfprintf;
using _LIBCPP_CNAMESPACE::vfscanf;
using _LIBCPP_CNAMESPACE::vsscanf;
using _LIBCPP_CNAMESPACE::vsnprintf;
using _LIBCPP_CNAMESPACE::vsprintf;
using _LIBCPP_CNAMESPACE::fgetc;
using _LIBCPP_CNAMESPACE::fgets;
using _LIBCPP_CNAMESPACE::fputc;
using _LIBCPP_CNAMESPACE::fputs;
using _LIBCPP_CNAMESPACE::getc;
using _LIBCPP_CNAMESPACE::putc;
using _LIBCPP_CNAMESPACE::ungetc;
using _LIBCPP_CNAMESPACE::fread;
using _LIBCPP_CNAMESPACE::fwrite;
using _LIBCPP_CNAMESPACE::fgetpos;
using _LIBCPP_CNAMESPACE::fseek;
using _LIBCPP_CNAMESPACE::fsetpos;
using _LIBCPP_CNAMESPACE::ftell;
using _LIBCPP_CNAMESPACE::rewind;
using _LIBCPP_CNAMESPACE::clearerr;
using _LIBCPP_CNAMESPACE::feof;
using _LIBCPP_CNAMESPACE::ferror;
using _LIBCPP_CNAMESPACE::perror;

#ifndef _LIBCPP_HAS_NO_GLOBAL_FILESYSTEM_NAMESPACE
using _LIBCPP_CNAMESPACE::fopen;
using _LIBCPP_CNAMESPACE::freopen;
using _LIBCPP_CNAMESPACE::remove;
using _LIBCPP_CNAMESPACE::rename;
using _LIBCPP_CNAMESPACE::tmpfile;
using _LIBCPP_CNAMESPACE::tmpnam;
#endif

#ifndef _LIBCPP_HAS_NO_STDIN
using _LIBCPP_CNAMESPACE::getchar;
#if _LIBCPP_STD_VER <= 11 && !defined(_LIBCPP_MSVCRT)
using _LIBCPP_CNAMESPACE::gets;
#endif
using _LIBCPP_CNAMESPACE::scanf;
using _LIBCPP_CNAMESPACE::vscanf;
#endif

#ifndef _LIBCPP_HAS_NO_STDOUT
using _LIBCPP_CNAMESPACE::printf;
using _LIBCPP_CNAMESPACE::putchar;
using _LIBCPP_CNAMESPACE::puts;
using _LIBCPP_CNAMESPACE::vprintf;
#endif

_LIBCPP_END_NAMESPACE_STD

#endif  // _LIBCPP_CSTDIO
