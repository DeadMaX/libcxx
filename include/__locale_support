// -*- C++ -*-
//===----------------------------------------------------------------------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is dual licensed under the MIT and the University of Illinois Open
// Source Licenses. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#ifndef _LIBCPP_LOCALE_SUPPORT
#define _LIBCPP_LOCALE_SUPPORT

#include <__config>

#ifndef _LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER
#pragma GCC system_header
#endif

#ifndef __libcpp_has_include
  #ifndef __has_include
    #define __libcpp_has_include(x) 0
  #else
    #define __libcpp_has_include(x) __has_include(x)
  #endif
#endif

#if defined(_LIBCPP_HAS_LOCALE_API_EXTERNAL) && \
    __libcpp_has_include(<__external_locale>)
#include <__external_locale>
#else

#if defined(_LIBCPP_HAS_LOCALE_API_EXTERNAL)
#define _LIBCPP_LOCALE_ABI_VISIBILITY _LIBCPP_FUNC_VIS
#else
#define _LIBCPP_LOCALE_ABI_VISIBILITY inline _LIBCPP_INLINE_VISIBILITY
#endif

#ifndef _LIBCXX_DISABLE_C_LINKAGE

#include <locale.h>

#if defined(_LIBCPP_MSVCRT) || defined(__MINGW32__)
# include <support/win32/locale_win32.h>
#elif defined(_AIX)
# include <support/ibm/xlocale.h>
#elif defined(__ANDROID__)
// Android gained the locale aware functions in L (API level 21)
# include <android/api-level.h>
# if __ANDROID_API__ <= 20
#  include <support/android/locale_bionic.h>
# endif
#elif defined(__sun__)
# include <xlocale.h>
# include <support/solaris/xlocale.h>
#elif defined(_NEWLIB_VERSION)
# include <support/newlib/xlocale.h>
#elif (defined(__GLIBC__) || defined(__APPLE__)      || defined(__FreeBSD__) \
    || defined(__EMSCRIPTEN__) || defined(__IBMCPP__))
# include <xlocale.h>
#elif defined(_LIBCPP_HAS_MUSL_LIBC)
# include <support/musl/xlocale.h>
#endif // __GLIBC__ || __APPLE__ || __FreeBSD__ || __sun__ || __EMSCRIPTEN__ || __IBMCPP__


#ifdef _LIBCPP_LOCALE__L_EXTENSIONS
#include <__bsd_locale_defaults.h>
#else
#include <__bsd_locale_fallbacks.h>
#endif

#if defined(__APPLE__) || defined(__FreeBSD__)
#  define _LIBCPP_GET_C_LOCALE 0
#elif defined(__CloudABI__) || defined(__NetBSD__)
#  define _LIBCPP_GET_C_LOCALE LC_C_LOCALE
#else
#  define _LIBCPP_GET_C_LOCALE __cloc()
   // Get the C locale object
   _LIBCPP_FUNC_VIS locale_t __cloc();
#define __cloc_defined
#endif   

_LIBCPP_BEGIN_NAMESPACE_STD

using __libcpp_locale_t = ::locale_t;

_LIBCPP_END_NAMESPACE_STD

#else // _LIBCXX_DISABLE_C_LINKAGE

# define LC_COLLATE_MASK    (1<<0)
# define LC_CTYPE_MASK      (1<<1)
# define LC_MONETARY_MASK   (1<<2)
# define LC_NUMERIC_MASK    (1<<3)
# define LC_TIME_MASK       (1<<4)
# define LC_MESSAGES_MASK   (1<<5)

_LIBCPP_BEGIN_NAMESPACE_STD

class __libcpp_locale_t
{
    
};

_LIBCPP_END_NAMESPACE_STD

#endif // _LIBCXX_DISABLE_C_LINKAGE

#endif

#endif // _LIBCPP_LOCALE_SUPPORT
