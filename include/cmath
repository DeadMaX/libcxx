// -*- C++ -*-
//===---------------------------- cmath -----------------------------------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is dual licensed under the MIT and the University of Illinois Open
// Source Licenses. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#ifndef _LIBCPP_CMATH
#define _LIBCPP_CMATH

/*
    cmath synopsis

Macros:

    HUGE_VAL
    HUGE_VALF               // C99
    HUGE_VALL               // C99
    INFINITY                // C99
    NAN                     // C99
    FP_INFINITE             // C99
    FP_NAN                  // C99
    FP_NORMAL               // C99
    FP_SUBNORMAL            // C99
    FP_ZERO                 // C99
    FP_FAST_FMA             // C99
    FP_FAST_FMAF            // C99
    FP_FAST_FMAL            // C99
    FP_ILOGB0               // C99
    FP_ILOGBNAN             // C99
    MATH_ERRNO              // C99
    MATH_ERREXCEPT          // C99
    math_errhandling        // C99

namespace std
{

Types:

    float_t                 // C99
    double_t                // C99

// C90

floating_point abs(floating_point x);

floating_point acos (arithmetic x);
float          acosf(float x);
long double    acosl(long double x);

floating_point asin (arithmetic x);
float          asinf(float x);
long double    asinl(long double x);

floating_point atan (arithmetic x);
float          atanf(float x);
long double    atanl(long double x);

floating_point atan2 (arithmetic y, arithmetic x);
float          atan2f(float y, float x);
long double    atan2l(long double y, long double x);

floating_point ceil (arithmetic x);
float          ceilf(float x);
long double    ceill(long double x);

floating_point cos (arithmetic x);
float          cosf(float x);
long double    cosl(long double x);

floating_point cosh (arithmetic x);
float          coshf(float x);
long double    coshl(long double x);

floating_point exp (arithmetic x);
float          expf(float x);
long double    expl(long double x);

floating_point fabs (arithmetic x);
float          fabsf(float x);
long double    fabsl(long double x);

floating_point floor (arithmetic x);
float          floorf(float x);
long double    floorl(long double x);

floating_point fmod (arithmetic x, arithmetic y);
float          fmodf(float x, float y);
long double    fmodl(long double x, long double y);

floating_point frexp (arithmetic value, int* exp);
float          frexpf(float value, int* exp);
long double    frexpl(long double value, int* exp);

floating_point ldexp (arithmetic value, int exp);
float          ldexpf(float value, int exp);
long double    ldexpl(long double value, int exp);

floating_point log (arithmetic x);
float          logf(float x);
long double    logl(long double x);

floating_point log10 (arithmetic x);
float          log10f(float x);
long double    log10l(long double x);

floating_point modf (floating_point value, floating_point* iptr);
float          modff(float value, float* iptr);
long double    modfl(long double value, long double* iptr);

floating_point pow (arithmetic x, arithmetic y);
float          powf(float x, float y);
long double    powl(long double x, long double y);

floating_point sin (arithmetic x);
float          sinf(float x);
long double    sinl(long double x);

floating_point sinh (arithmetic x);
float          sinhf(float x);
long double    sinhl(long double x);

floating_point sqrt (arithmetic x);
float          sqrtf(float x);
long double    sqrtl(long double x);

floating_point tan (arithmetic x);
float          tanf(float x);
long double    tanl(long double x);

floating_point tanh (arithmetic x);
float          tanhf(float x);
long double    tanhl(long double x);

//  C99

bool signbit(arithmetic x);

int fpclassify(arithmetic x);

bool isfinite(arithmetic x);
bool isinf(arithmetic x);
bool isnan(arithmetic x);
bool isnormal(arithmetic x);

bool isgreater(arithmetic x, arithmetic y);
bool isgreaterequal(arithmetic x, arithmetic y);
bool isless(arithmetic x, arithmetic y);
bool islessequal(arithmetic x, arithmetic y);
bool islessgreater(arithmetic x, arithmetic y);
bool isunordered(arithmetic x, arithmetic y);

floating_point acosh (arithmetic x);
float          acoshf(float x);
long double    acoshl(long double x);

floating_point asinh (arithmetic x);
float          asinhf(float x);
long double    asinhl(long double x);

floating_point atanh (arithmetic x);
float          atanhf(float x);
long double    atanhl(long double x);

floating_point cbrt (arithmetic x);
float          cbrtf(float x);
long double    cbrtl(long double x);

floating_point copysign (arithmetic x, arithmetic y);
float          copysignf(float x, float y);
long double    copysignl(long double x, long double y);

floating_point erf (arithmetic x);
float          erff(float x);
long double    erfl(long double x);

floating_point erfc (arithmetic x);
float          erfcf(float x);
long double    erfcl(long double x);

floating_point exp2 (arithmetic x);
float          exp2f(float x);
long double    exp2l(long double x);

floating_point expm1 (arithmetic x);
float          expm1f(float x);
long double    expm1l(long double x);

floating_point fdim (arithmetic x, arithmetic y);
float          fdimf(float x, float y);
long double    fdiml(long double x, long double y);

floating_point fma (arithmetic x, arithmetic y, arithmetic z);
float          fmaf(float x, float y, float z);
long double    fmal(long double x, long double y, long double z);

floating_point fmax (arithmetic x, arithmetic y);
float          fmaxf(float x, float y);
long double    fmaxl(long double x, long double y);

floating_point fmin (arithmetic x, arithmetic y);
float          fminf(float x, float y);
long double    fminl(long double x, long double y);

floating_point hypot (arithmetic x, arithmetic y);
float          hypotf(float x, float y);
long double    hypotl(long double x, long double y);

double       hypot(double x, double y, double z);                // C++17
float        hypot(float x, float y, float z);                   // C++17
long double  hypot(long double x, long double y, long double z); // C++17

int ilogb (arithmetic x);
int ilogbf(float x);
int ilogbl(long double x);

floating_point lgamma (arithmetic x);
float          lgammaf(float x);
long double    lgammal(long double x);

long long llrint (arithmetic x);
long long llrintf(float x);
long long llrintl(long double x);

long long llround (arithmetic x);
long long llroundf(float x);
long long llroundl(long double x);

floating_point log1p (arithmetic x);
float          log1pf(float x);
long double    log1pl(long double x);

floating_point log2 (arithmetic x);
float          log2f(float x);
long double    log2l(long double x);

floating_point logb (arithmetic x);
float          logbf(float x);
long double    logbl(long double x);

long lrint (arithmetic x);
long lrintf(float x);
long lrintl(long double x);

long lround (arithmetic x);
long lroundf(float x);
long lroundl(long double x);

double      nan (const char* str);
float       nanf(const char* str);
long double nanl(const char* str);

floating_point nearbyint (arithmetic x);
float          nearbyintf(float x);
long double    nearbyintl(long double x);

floating_point nextafter (arithmetic x, arithmetic y);
float          nextafterf(float x, float y);
long double    nextafterl(long double x, long double y);

floating_point nexttoward (arithmetic x, long double y);
float          nexttowardf(float x, long double y);
long double    nexttowardl(long double x, long double y);

floating_point remainder (arithmetic x, arithmetic y);
float          remainderf(float x, float y);
long double    remainderl(long double x, long double y);

floating_point remquo (arithmetic x, arithmetic y, int* pquo);
float          remquof(float x, float y, int* pquo);
long double    remquol(long double x, long double y, int* pquo);

floating_point rint (arithmetic x);
float          rintf(float x);
long double    rintl(long double x);

floating_point round (arithmetic x);
float          roundf(float x);
long double    roundl(long double x);

floating_point scalbln (arithmetic x, long ex);
float          scalblnf(float x, long ex);
long double    scalblnl(long double x, long ex);

floating_point scalbn (arithmetic x, int ex);
float          scalbnf(float x, int ex);
long double    scalbnl(long double x, int ex);

floating_point tgamma (arithmetic x);
float          tgammaf(float x);
long double    tgammal(long double x);

floating_point trunc (arithmetic x);
float          truncf(float x);
long double    truncl(long double x);

}  // std

*/

#include <__config>
#include <math.h>

#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
#pragma GCC system_header
#endif

_LIBCPP_BEGIN_NAMESPACE_STD

using _LIBCPP_CNAMESPACE::signbit;
using _LIBCPP_CNAMESPACE::fpclassify;
using _LIBCPP_CNAMESPACE::isfinite;
using _LIBCPP_CNAMESPACE::isinf;
using _LIBCPP_CNAMESPACE::isnan;
using _LIBCPP_CNAMESPACE::isnormal;
using _LIBCPP_CNAMESPACE::isgreater;
using _LIBCPP_CNAMESPACE::isgreaterequal;
using _LIBCPP_CNAMESPACE::isless;
using _LIBCPP_CNAMESPACE::islessequal;
using _LIBCPP_CNAMESPACE::islessgreater;
using _LIBCPP_CNAMESPACE::isunordered;
using _LIBCPP_CNAMESPACE::isunordered;

using _LIBCPP_CNAMESPACE::float_t;
using _LIBCPP_CNAMESPACE::double_t;

#ifndef _AIX
using _LIBCPP_CNAMESPACE::abs;
#endif

using _LIBCPP_CNAMESPACE::acos;
using _LIBCPP_CNAMESPACE::acosf;
using _LIBCPP_CNAMESPACE::asin;
using _LIBCPP_CNAMESPACE::asinf;
using _LIBCPP_CNAMESPACE::atan;
using _LIBCPP_CNAMESPACE::atanf;
using _LIBCPP_CNAMESPACE::atan2;
using _LIBCPP_CNAMESPACE::atan2f;
using _LIBCPP_CNAMESPACE::ceil;
using _LIBCPP_CNAMESPACE::ceilf;
using _LIBCPP_CNAMESPACE::cos;
using _LIBCPP_CNAMESPACE::cosf;
using _LIBCPP_CNAMESPACE::cosh;
using _LIBCPP_CNAMESPACE::coshf;

using _LIBCPP_CNAMESPACE::exp;
using _LIBCPP_CNAMESPACE::expf;

using _LIBCPP_CNAMESPACE::fabs;
using _LIBCPP_CNAMESPACE::fabsf;
using _LIBCPP_CNAMESPACE::floor;
using _LIBCPP_CNAMESPACE::floorf;

using _LIBCPP_CNAMESPACE::fmod;
using _LIBCPP_CNAMESPACE::fmodf;

using _LIBCPP_CNAMESPACE::frexp;
using _LIBCPP_CNAMESPACE::frexpf;
using _LIBCPP_CNAMESPACE::ldexp;
using _LIBCPP_CNAMESPACE::ldexpf;

using _LIBCPP_CNAMESPACE::log;
using _LIBCPP_CNAMESPACE::logf;

using _LIBCPP_CNAMESPACE::log10;
using _LIBCPP_CNAMESPACE::log10f;
using _LIBCPP_CNAMESPACE::modf;
using _LIBCPP_CNAMESPACE::modff;

using _LIBCPP_CNAMESPACE::pow;
using _LIBCPP_CNAMESPACE::powf;

using _LIBCPP_CNAMESPACE::sin;
using _LIBCPP_CNAMESPACE::sinf;
using _LIBCPP_CNAMESPACE::sinh;
using _LIBCPP_CNAMESPACE::sinhf;

using _LIBCPP_CNAMESPACE::sqrt;
using _LIBCPP_CNAMESPACE::sqrtf;
using _LIBCPP_CNAMESPACE::tan;
using _LIBCPP_CNAMESPACE::tanf;

using _LIBCPP_CNAMESPACE::tanh;
using _LIBCPP_CNAMESPACE::tanhf;

using _LIBCPP_CNAMESPACE::acosh;
using _LIBCPP_CNAMESPACE::acoshf;
using _LIBCPP_CNAMESPACE::asinh;
using _LIBCPP_CNAMESPACE::asinhf;
using _LIBCPP_CNAMESPACE::atanh;
using _LIBCPP_CNAMESPACE::atanhf;
using _LIBCPP_CNAMESPACE::cbrt;
using _LIBCPP_CNAMESPACE::cbrtf;

using _LIBCPP_CNAMESPACE::copysign;
using _LIBCPP_CNAMESPACE::copysignf;

using _LIBCPP_CNAMESPACE::erf;
using _LIBCPP_CNAMESPACE::erff;
using _LIBCPP_CNAMESPACE::erfc;
using _LIBCPP_CNAMESPACE::erfcf;
using _LIBCPP_CNAMESPACE::exp2;
using _LIBCPP_CNAMESPACE::exp2f;
using _LIBCPP_CNAMESPACE::expm1;
using _LIBCPP_CNAMESPACE::expm1f;
using _LIBCPP_CNAMESPACE::fdim;
using _LIBCPP_CNAMESPACE::fdimf;
using _LIBCPP_CNAMESPACE::fmaf;
using _LIBCPP_CNAMESPACE::fma;
using _LIBCPP_CNAMESPACE::fmax;
using _LIBCPP_CNAMESPACE::fmaxf;
using _LIBCPP_CNAMESPACE::fmin;
using _LIBCPP_CNAMESPACE::fminf;
using _LIBCPP_CNAMESPACE::hypot;
using _LIBCPP_CNAMESPACE::hypotf;
using _LIBCPP_CNAMESPACE::ilogb;
using _LIBCPP_CNAMESPACE::ilogbf;
using _LIBCPP_CNAMESPACE::lgamma;
using _LIBCPP_CNAMESPACE::lgammaf;
using _LIBCPP_CNAMESPACE::llrint;
using _LIBCPP_CNAMESPACE::llrintf;
using _LIBCPP_CNAMESPACE::llround;
using _LIBCPP_CNAMESPACE::llroundf;
using _LIBCPP_CNAMESPACE::log1p;
using _LIBCPP_CNAMESPACE::log1pf;
using _LIBCPP_CNAMESPACE::log2;
using _LIBCPP_CNAMESPACE::log2f;
using _LIBCPP_CNAMESPACE::logb;
using _LIBCPP_CNAMESPACE::logbf;
using _LIBCPP_CNAMESPACE::lrint;
using _LIBCPP_CNAMESPACE::lrintf;
using _LIBCPP_CNAMESPACE::lround;
using _LIBCPP_CNAMESPACE::lroundf;

using _LIBCPP_CNAMESPACE::nan;
using _LIBCPP_CNAMESPACE::nanf;

using _LIBCPP_CNAMESPACE::nearbyint;
using _LIBCPP_CNAMESPACE::nearbyintf;
using _LIBCPP_CNAMESPACE::nextafter;
using _LIBCPP_CNAMESPACE::nextafterf;
using _LIBCPP_CNAMESPACE::nexttoward;
using _LIBCPP_CNAMESPACE::nexttowardf;
using _LIBCPP_CNAMESPACE::remainder;
using _LIBCPP_CNAMESPACE::remainderf;
using _LIBCPP_CNAMESPACE::remquo;
using _LIBCPP_CNAMESPACE::remquof;
using _LIBCPP_CNAMESPACE::rint;
using _LIBCPP_CNAMESPACE::rintf;
using _LIBCPP_CNAMESPACE::round;
using _LIBCPP_CNAMESPACE::roundf;
using _LIBCPP_CNAMESPACE::scalbln;
using _LIBCPP_CNAMESPACE::scalblnf;
using _LIBCPP_CNAMESPACE::scalbn;
using _LIBCPP_CNAMESPACE::scalbnf;
using _LIBCPP_CNAMESPACE::tgamma;
using _LIBCPP_CNAMESPACE::tgammaf;
using _LIBCPP_CNAMESPACE::trunc;
using _LIBCPP_CNAMESPACE::truncf;

using _LIBCPP_CNAMESPACE::acosl;
using _LIBCPP_CNAMESPACE::asinl;
using _LIBCPP_CNAMESPACE::atanl;
using _LIBCPP_CNAMESPACE::atan2l;
using _LIBCPP_CNAMESPACE::ceill;
using _LIBCPP_CNAMESPACE::cosl;
using _LIBCPP_CNAMESPACE::coshl;
using _LIBCPP_CNAMESPACE::expl;
using _LIBCPP_CNAMESPACE::fabsl;
using _LIBCPP_CNAMESPACE::floorl;
using _LIBCPP_CNAMESPACE::fmodl;
using _LIBCPP_CNAMESPACE::frexpl;
using _LIBCPP_CNAMESPACE::ldexpl;
using _LIBCPP_CNAMESPACE::logl;
using _LIBCPP_CNAMESPACE::log10l;
using _LIBCPP_CNAMESPACE::modfl;
using _LIBCPP_CNAMESPACE::powl;
using _LIBCPP_CNAMESPACE::sinl;
using _LIBCPP_CNAMESPACE::sinhl;
using _LIBCPP_CNAMESPACE::sqrtl;
using _LIBCPP_CNAMESPACE::tanl;

using _LIBCPP_CNAMESPACE::tanhl;
using _LIBCPP_CNAMESPACE::acoshl;
using _LIBCPP_CNAMESPACE::asinhl;
using _LIBCPP_CNAMESPACE::atanhl;
using _LIBCPP_CNAMESPACE::cbrtl;

using _LIBCPP_CNAMESPACE::copysignl;

using _LIBCPP_CNAMESPACE::erfl;
using _LIBCPP_CNAMESPACE::erfcl;
using _LIBCPP_CNAMESPACE::exp2l;
using _LIBCPP_CNAMESPACE::expm1l;
using _LIBCPP_CNAMESPACE::fdiml;
using _LIBCPP_CNAMESPACE::fmal;
using _LIBCPP_CNAMESPACE::fmaxl;
using _LIBCPP_CNAMESPACE::fminl;
using _LIBCPP_CNAMESPACE::hypotl;
using _LIBCPP_CNAMESPACE::ilogbl;
using _LIBCPP_CNAMESPACE::lgammal;
using _LIBCPP_CNAMESPACE::llrintl;
using _LIBCPP_CNAMESPACE::llroundl;
using _LIBCPP_CNAMESPACE::log1pl;
using _LIBCPP_CNAMESPACE::log2l;
using _LIBCPP_CNAMESPACE::logbl;
using _LIBCPP_CNAMESPACE::lrintl;
using _LIBCPP_CNAMESPACE::lroundl;
using _LIBCPP_CNAMESPACE::nanl;
using _LIBCPP_CNAMESPACE::nearbyintl;
using _LIBCPP_CNAMESPACE::nextafterl;
using _LIBCPP_CNAMESPACE::nexttowardl;
using _LIBCPP_CNAMESPACE::remainderl;
using _LIBCPP_CNAMESPACE::remquol;
using _LIBCPP_CNAMESPACE::rintl;
using _LIBCPP_CNAMESPACE::roundl;
using _LIBCPP_CNAMESPACE::scalblnl;
using _LIBCPP_CNAMESPACE::scalbnl;
using _LIBCPP_CNAMESPACE::tgammal;
using _LIBCPP_CNAMESPACE::truncl;

#if _LIBCPP_STD_VER > 14
inline _LIBCPP_INLINE_VISIBILITY float       hypot(       float x,       float y,       float z ) { return sqrt(x*x + y*y + z*z); }
inline _LIBCPP_INLINE_VISIBILITY double      hypot(      double x,      double y,      double z ) { return sqrt(x*x + y*y + z*z); }
inline _LIBCPP_INLINE_VISIBILITY long double hypot( long double x, long double y, long double z ) { return sqrt(x*x + y*y + z*z); }

template <class _A1, class _A2, class _A3>
inline _LIBCPP_INLINE_VISIBILITY
typename __lazy_enable_if
<
    is_arithmetic<_A1>::value &&
    is_arithmetic<_A2>::value &&
    is_arithmetic<_A3>::value,
    __promote<_A1, _A2, _A3>
>::type
hypot(_A1 __lcpp_x, _A2 __lcpp_y, _A3 __lcpp_z) _NOEXCEPT
{
    typedef typename __promote<_A1, _A2, _A3>::type __result_type;
    static_assert((!(is_same<_A1, __result_type>::value &&
                     is_same<_A2, __result_type>::value &&
                     is_same<_A3, __result_type>::value)), "");
    return hypot((__result_type)__lcpp_x, (__result_type)__lcpp_y, (__result_type)__lcpp_z);
}
#endif

template <class _A1>
_LIBCPP_ALWAYS_INLINE
_LIBCPP_CONSTEXPR typename enable_if<is_floating_point<_A1>::value, bool>::type
__libcpp_isnan_or_builtin(_A1 __lcpp_x) _NOEXCEPT
{
#if __has_builtin(__builtin_isnan)
    return __builtin_isnan(__lcpp_x);
#else
    return isnan(__lcpp_x);
#endif
}

template <class _A1>
_LIBCPP_ALWAYS_INLINE
_LIBCPP_CONSTEXPR typename enable_if<!is_floating_point<_A1>::value, bool>::type
__libcpp_isnan_or_builtin(_A1 __lcpp_x) _NOEXCEPT
{
    return isnan(__lcpp_x);
}

template <class _A1>
_LIBCPP_ALWAYS_INLINE
_LIBCPP_CONSTEXPR typename enable_if<is_floating_point<_A1>::value, bool>::type
__libcpp_isinf_or_builtin(_A1 __lcpp_x) _NOEXCEPT
{
#if __has_builtin(__builtin_isinf)
    return __builtin_isinf(__lcpp_x);
#else
    return isinf(__lcpp_x);
#endif
}

template <class _A1>
_LIBCPP_ALWAYS_INLINE
_LIBCPP_CONSTEXPR typename enable_if<!is_floating_point<_A1>::value, bool>::type
__libcpp_isinf_or_builtin(_A1 __lcpp_x) _NOEXCEPT
{
    return isinf(__lcpp_x);
}

template <class _A1>
_LIBCPP_ALWAYS_INLINE
_LIBCPP_CONSTEXPR typename enable_if<is_floating_point<_A1>::value, bool>::type
__libcpp_isfinite_or_builtin(_A1 __lcpp_x) _NOEXCEPT
{
#if __has_builtin(__builtin_isfinite)
    return __builtin_isfinite(__lcpp_x);
#else
    return isfinite(__lcpp_x);
#endif
}

template <class _A1>
_LIBCPP_ALWAYS_INLINE
_LIBCPP_CONSTEXPR typename enable_if<!is_floating_point<_A1>::value, bool>::type
__libcpp_isfinite_or_builtin(_A1 __lcpp_x) _NOEXCEPT
{
    return isfinite(__lcpp_x);
}

_LIBCPP_END_NAMESPACE_STD

#endif  // _LIBCPP_CMATH
