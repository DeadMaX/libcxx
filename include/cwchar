// -*- C++ -*-
//===--------------------------- cwchar -----------------------------------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is dual licensed under the MIT and the University of Illinois Open
// Source Licenses. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#ifndef _LIBCPP_CWCHAR
#define _LIBCPP_CWCHAR

/*
    cwchar synopsis

Macros:

    NULL
    WCHAR_MAX
    WCHAR_MIN
    WEOF

namespace std
{

Types:

    mbstate_t
    size_t
    tm
    wint_t

int fwprintf(FILE* restrict stream, const wchar_t* restrict format, ...);
int fwscanf(FILE* restrict stream, const wchar_t* restrict format, ...);
int swprintf(wchar_t* restrict s, size_t n, const wchar_t* restrict format, ...);
int swscanf(const wchar_t* restrict s, const wchar_t* restrict format, ...);
int vfwprintf(FILE* restrict stream, const wchar_t* restrict format, va_list arg);
int vfwscanf(FILE* restrict stream, const wchar_t* restrict format, va_list arg);  // C99
int vswprintf(wchar_t* restrict s, size_t n, const wchar_t* restrict format, va_list arg);
int vswscanf(const wchar_t* restrict s, const wchar_t* restrict format, va_list arg);  // C99
int vwprintf(const wchar_t* restrict format, va_list arg);
int vwscanf(const wchar_t* restrict format, va_list arg);  // C99
int wprintf(const wchar_t* restrict format, ...);
int wscanf(const wchar_t* restrict format, ...);
wint_t fgetwc(FILE* stream);
wchar_t* fgetws(wchar_t* restrict s, int n, FILE* restrict stream);
wint_t fputwc(wchar_t c, FILE* stream);
int fputws(const wchar_t* restrict s, FILE* restrict stream);
int fwide(FILE* stream, int mode);
wint_t getwc(FILE* stream);
wint_t getwchar();
wint_t putwc(wchar_t c, FILE* stream);
wint_t putwchar(wchar_t c);
wint_t ungetwc(wint_t c, FILE* stream);
double wcstod(const wchar_t* restrict nptr, wchar_t** restrict endptr);
float wcstof(const wchar_t* restrict nptr, wchar_t** restrict endptr);         // C99
long double wcstold(const wchar_t* restrict nptr, wchar_t** restrict endptr);  // C99
long wcstol(const wchar_t* restrict nptr, wchar_t** restrict endptr, int base);
long long wcstoll(const wchar_t* restrict nptr, wchar_t** restrict endptr, int base);  // C99
unsigned long wcstoul(const wchar_t* restrict nptr, wchar_t** restrict endptr, int base);
unsigned long long wcstoull(const wchar_t* restrict nptr, wchar_t** restrict endptr, int base);  // C99
wchar_t* wcscpy(wchar_t* restrict s1, const wchar_t* restrict s2);
wchar_t* wcsncpy(wchar_t* restrict s1, const wchar_t* restrict s2, size_t n);
wchar_t* wcscat(wchar_t* restrict s1, const wchar_t* restrict s2);
wchar_t* wcsncat(wchar_t* restrict s1, const wchar_t* restrict s2, size_t n);
int wcscmp(const wchar_t* s1, const wchar_t* s2);
int wcscoll(const wchar_t* s1, const wchar_t* s2);
int wcsncmp(const wchar_t* s1, const wchar_t* s2, size_t n);
size_t wcsxfrm(wchar_t* restrict s1, const wchar_t* restrict s2, size_t n);
const wchar_t* wcschr(const wchar_t* s, wchar_t c);
      wchar_t* wcschr(      wchar_t* s, wchar_t c);
size_t wcscspn(const wchar_t* s1, const wchar_t* s2);
size_t wcslen(const wchar_t* s);
const wchar_t* wcspbrk(const wchar_t* s1, const wchar_t* s2);
      wchar_t* wcspbrk(      wchar_t* s1, const wchar_t* s2);
const wchar_t* wcsrchr(const wchar_t* s, wchar_t c);
      wchar_t* wcsrchr(      wchar_t* s, wchar_t c);
size_t wcsspn(const wchar_t* s1, const wchar_t* s2);
const wchar_t* wcsstr(const wchar_t* s1, const wchar_t* s2);
      wchar_t* wcsstr(      wchar_t* s1, const wchar_t* s2);
wchar_t* wcstok(wchar_t* restrict s1, const wchar_t* restrict s2, wchar_t** restrict ptr);
const wchar_t* wmemchr(const wchar_t* s, wchar_t c, size_t n);
      wchar_t* wmemchr(      wchar_t* s, wchar_t c, size_t n);
int wmemcmp(wchar_t* restrict s1, const wchar_t* restrict s2, size_t n);
wchar_t* wmemcpy(wchar_t* restrict s1, const wchar_t* restrict s2, size_t n);
wchar_t* wmemmove(wchar_t* s1, const wchar_t* s2, size_t n);
wchar_t* wmemset(wchar_t* s, wchar_t c, size_t n);
size_t wcsftime(wchar_t* restrict s, size_t maxsize, const wchar_t* restrict format,
                const tm* restrict timeptr);
wint_t btowc(int c);
int wctob(wint_t c);
int mbsinit(const mbstate_t* ps);
size_t mbrlen(const char* restrict s, size_t n, mbstate_t* restrict ps);
size_t mbrtowc(wchar_t* restrict pwc, const char* restrict s, size_t n, mbstate_t* restrict ps);
size_t wcrtomb(char* restrict s, wchar_t wc, mbstate_t* restrict ps);
size_t mbsrtowcs(wchar_t* restrict dst, const char** restrict src, size_t len,
                 mbstate_t* restrict ps);
size_t wcsrtombs(char* restrict dst, const wchar_t** restrict src, size_t len,
                 mbstate_t* restrict ps);

}  // std

*/

#include <__config>
#include <cwctype>
#include <wchar.h>

#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
#pragma GCC system_header
#endif

_LIBCPP_BEGIN_NAMESPACE_STD

using _LIBCPP_CNAMESPACE::mbstate_t;
using _LIBCPP_CNAMESPACE::size_t;
using _LIBCPP_CNAMESPACE::tm;
using _LIBCPP_CNAMESPACE::wint_t;
using _LIBCPP_CNAMESPACE::FILE;
using _LIBCPP_CNAMESPACE::fwprintf;
using _LIBCPP_CNAMESPACE::fwscanf;
using _LIBCPP_CNAMESPACE::swprintf;
using _LIBCPP_CNAMESPACE::vfwprintf;
using _LIBCPP_CNAMESPACE::vswprintf;
using _LIBCPP_CNAMESPACE::swscanf;
using _LIBCPP_CNAMESPACE::vfwscanf;
using _LIBCPP_CNAMESPACE::vswscanf;
using _LIBCPP_CNAMESPACE::fgetwc;
using _LIBCPP_CNAMESPACE::fgetws;
using _LIBCPP_CNAMESPACE::fputwc;
using _LIBCPP_CNAMESPACE::fputws;
using _LIBCPP_CNAMESPACE::fwide;
using _LIBCPP_CNAMESPACE::getwc;
using _LIBCPP_CNAMESPACE::putwc;
using _LIBCPP_CNAMESPACE::ungetwc;
using _LIBCPP_CNAMESPACE::wcstod;
using _LIBCPP_CNAMESPACE::wcstof;
using _LIBCPP_CNAMESPACE::wcstold;
using _LIBCPP_CNAMESPACE::wcstol;
#ifndef _LIBCPP_HAS_NO_LONG_LONG
using _LIBCPP_CNAMESPACE::wcstoll;
#endif // _LIBCPP_HAS_NO_LONG_LONG
using _LIBCPP_CNAMESPACE::wcstoul;
#ifndef _LIBCPP_HAS_NO_LONG_LONG
using _LIBCPP_CNAMESPACE::wcstoull;
#endif // _LIBCPP_HAS_NO_LONG_LONG
using _LIBCPP_CNAMESPACE::wcscpy;
using _LIBCPP_CNAMESPACE::wcsncpy;
using _LIBCPP_CNAMESPACE::wcscat;
using _LIBCPP_CNAMESPACE::wcsncat;
using _LIBCPP_CNAMESPACE::wcscmp;
using _LIBCPP_CNAMESPACE::wcscoll;
using _LIBCPP_CNAMESPACE::wcsncmp;
using _LIBCPP_CNAMESPACE::wcsxfrm;
using _LIBCPP_CNAMESPACE::wcschr;
using _LIBCPP_CNAMESPACE::wcspbrk;
using _LIBCPP_CNAMESPACE::wcsrchr;
using _LIBCPP_CNAMESPACE::wcsstr;
using _LIBCPP_CNAMESPACE::wmemchr;
using _LIBCPP_CNAMESPACE::wcscspn;
using _LIBCPP_CNAMESPACE::wcslen;
using _LIBCPP_CNAMESPACE::wcsspn;
using _LIBCPP_CNAMESPACE::wcstok;
using _LIBCPP_CNAMESPACE::wmemcmp;
using _LIBCPP_CNAMESPACE::wmemcpy;
using _LIBCPP_CNAMESPACE::wmemmove;
using _LIBCPP_CNAMESPACE::wmemset;
using _LIBCPP_CNAMESPACE::wcsftime;
using _LIBCPP_CNAMESPACE::btowc;
using _LIBCPP_CNAMESPACE::wctob;
using _LIBCPP_CNAMESPACE::mbsinit;
using _LIBCPP_CNAMESPACE::mbrlen;
using _LIBCPP_CNAMESPACE::mbrtowc;
using _LIBCPP_CNAMESPACE::wcrtomb;
using _LIBCPP_CNAMESPACE::mbsrtowcs;
using _LIBCPP_CNAMESPACE::wcsrtombs;

#ifndef _LIBCPP_HAS_NO_STDIN
using _LIBCPP_CNAMESPACE::getwchar;
using _LIBCPP_CNAMESPACE::vwscanf;
using _LIBCPP_CNAMESPACE::wscanf;
#endif

#ifndef _LIBCPP_HAS_NO_STDOUT
using _LIBCPP_CNAMESPACE::putwchar;
using _LIBCPP_CNAMESPACE::vwprintf;
using _LIBCPP_CNAMESPACE::wprintf;
#endif

_LIBCPP_END_NAMESPACE_STD

#endif  // _LIBCPP_CWCHAR
