// -*- C++ -*-
//===--------------------------- cstring ----------------------------------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#ifndef _LIBCPP_CSTRING
#define _LIBCPP_CSTRING

/*
    cstring synopsis

Macros:

    NULL

namespace std
{

Types:

    size_t

void* memcpy(void* restrict s1, const void* restrict s2, size_t n);
void* memmove(void* s1, const void* s2, size_t n);
char* strcpy (char* restrict s1, const char* restrict s2);
char* strncpy(char* restrict s1, const char* restrict s2, size_t n);
char* strcat (char* restrict s1, const char* restrict s2);
char* strncat(char* restrict s1, const char* restrict s2, size_t n);
int memcmp(const void* s1, const void* s2, size_t n);
int strcmp (const char* s1, const char* s2);
int strncmp(const char* s1, const char* s2, size_t n);
int strcoll(const char* s1, const char* s2);
size_t strxfrm(char* restrict s1, const char* restrict s2, size_t n);
const void* memchr(const void* s, int c, size_t n);
      void* memchr(      void* s, int c, size_t n);
const char* strchr(const char* s, int c);
      char* strchr(      char* s, int c);
size_t strcspn(const char* s1, const char* s2);
const char* strpbrk(const char* s1, const char* s2);
      char* strpbrk(      char* s1, const char* s2);
const char* strrchr(const char* s, int c);
      char* strrchr(      char* s, int c);
size_t strspn(const char* s1, const char* s2);
const char* strstr(const char* s1, const char* s2);
      char* strstr(      char* s1, const char* s2);
char* strtok(char* restrict s1, const char* restrict s2);
void* memset(void* s, int c, size_t n);
char* strerror(int errnum);
size_t strlen(const char* s);

}  // std

*/

#include <__config>
#include <string.h>

#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
#pragma GCC system_header
#endif

_LIBCPP_BEGIN_NAMESPACE_STD

using _LIBCPP_CNAMESPACE::size_t;
using _LIBCPP_CNAMESPACE::memcpy;
using _LIBCPP_CNAMESPACE::memmove;
using _LIBCPP_CNAMESPACE::strcpy;
using _LIBCPP_CNAMESPACE::strncpy;
using _LIBCPP_CNAMESPACE::strcat;
using _LIBCPP_CNAMESPACE::strncat;
using _LIBCPP_CNAMESPACE::memcmp;
using _LIBCPP_CNAMESPACE::strcmp;
using _LIBCPP_CNAMESPACE::strncmp;
using _LIBCPP_CNAMESPACE::strcoll;
using _LIBCPP_CNAMESPACE::strxfrm;
using _LIBCPP_CNAMESPACE::memchr;
using _LIBCPP_CNAMESPACE::strchr;
using _LIBCPP_CNAMESPACE::strcspn;
using _LIBCPP_CNAMESPACE::strpbrk;
using _LIBCPP_CNAMESPACE::strrchr;
using _LIBCPP_CNAMESPACE::strspn;
using _LIBCPP_CNAMESPACE::strstr;
#ifndef _LIBCPP_HAS_NO_THREAD_UNSAFE_C_FUNCTIONS
using _LIBCPP_CNAMESPACE::strtok;
#endif
using _LIBCPP_CNAMESPACE::memset;
using _LIBCPP_CNAMESPACE::strerror;
using _LIBCPP_CNAMESPACE::strlen;

_LIBCPP_END_NAMESPACE_STD

#endif  // _LIBCPP_CSTRING
